// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email    String    @id @unique @db.VarChar(50)
  password String    @unique @db.VarChar(60)
  name     String    @db.VarChar(50)
  lastName String    @map("last_name") @db.VarChar(50)
  phone    String    @db.VarChar(15)
  role     Role[]    @relation("AllRoleUser")
  task     Task[]    @relation("AllTaskUser")
  comment  Comment[] @relation("AllCommentUser")

  @@map("USERS")
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String    @db.Text
  role        Role[]    @relation("AllRoleProject")
  task        Task[]    @relation("AllTaskProject")
  Comment     Comment[] @relation("AllCommentProject")

  @@map("PROJECT")
}

model Role {
  id        Int     @id @default(autoincrement())
  user      User    @relation("AllRoleUser", fields: [userId], references: [email])
  userId    String  @map("user_id")
  project   Project @relation("AllRoleProject", fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int     @map("project_id")
  role      String  @db.VarChar(50)

  @@map("ROLE")
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String    @db.Text
  status      String    @db.VarChar(50)
  user        User?     @relation("AllTaskUser", fields: [userId], references: [email], onDelete: SetNull)
  userId      String?   @map("user_id")
  project     Project   @relation("AllTaskProject", fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int       @map("project_id")
  comment     Comment[] @relation("AllCommentTask")

  @@map("TASK")
}

model Comment {
  id        Int     @id @default(autoincrement())
  user      User?   @relation("AllCommentUser", fields: [userId], references: [email], onDelete: SetNull)
  userId    String? @map("user_id")
  task      Task    @relation("AllCommentTask", fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int     @map("task_id")
  project   Project @relation("AllCommentProject", fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int     @map("project_id")
  comment   String  @db.Text

  @@map("COMMENT")
}
